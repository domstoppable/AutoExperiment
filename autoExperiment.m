function [responseData, flipData, stimulusData, rawResponseData] = ...
    autoExperiment(wPtr, metaData, stimulusData, inputData)

    % TODO: Restrict keys with KbQueueCreate
    % TODO: http://psychtoolbox.org/docs/PsychImaging
    %       http://psychtoolbox.org/docs/PanelFitterDemo
    % TODO: Do I need imageData.width and imageData.height?

    narginchk(4, 4);
    
    % Setup data structures
    totalFlips = size(stimulusData.fileName, 1);
    flipData = struct( ...
        'Desync', cell(totalFlips, 1), ...
        'Description', cell(totalFlips, 1), ...
        'WaitStartTime', cell(totalFlips, 1), ...
        'ExpectedTime', cell(totalFlips, 1), ...
        'FlipStartTime', cell(totalFlips, 1), ...
        'FlipEndTime', cell(totalFlips, 1), ...
        'StimulusOnsetTimeEstimate', cell(totalFlips, 1), ...
        'Missed', cell(totalFlips, 1) ...
    );
    rawResponseData = struct( ...
        'validInputValues', cell(totalFlips-1, 1), ...
        'allInputValues', cell(totalFlips-1, 1), ...
        'timestamp', cell(totalFlips-1, 1), ...
        'allTimestamps', cell(totalFlips-1, 1), ...
        'uncertainty', cell(totalFlips-1, 1) ...
    );
    totalResponseEvents = max([inputData.responseEvent]);
    responseData = struct( ...
        'isCorrect', cell(totalResponseEvents, 1), ...
        'reactionTime', cell(totalResponseEvents, 1), ...
        'reactionTimeTotal', cell(totalResponseEvents, 1), ...
        'uncertainty', cell(totalResponseEvents, 1), ...
        'buttonValue', cell(totalResponseEvents, 1) ...
    );
    
    % Setup Screen
    ScreenCoords = Screen('Rect', wPtr);
    [xc, yc] = RectCenter(ScreenCoords);
    
    % Setup response device
    inputHandle = setupInput(metaData.inputType, metaData.inputID, ...
                             metaData.BaudRate);
    
    % Loading screen
    DisplayText = 'Loading Stimuli...\n\nPlease wait...';
    DrawFormattedText(wPtr, DisplayText, 'center', 'center');
    Screen('Flip', wPtr);

    % Preload images
    imageMap = preloadImages(stimulusData, wPtr);

    % Preload movies
    movieMap = preloadVideos(stimulusData, metaData, wPtr);
    
    ExpStartTime = GetSecs();
    NextFlip = ExpStartTime;
    eventStart = NaN;
    eventBaseline = NaN;

    for nTrial = 1:totalFlips

        Screen('FillRect', wPtr, metaData.backgroundColor);

        drawText(wPtr, ...
            stimulusData.fileName(nTrial, stimulusData.isText(nTrial, :)), ...
            stimulusData.width(nTrial, stimulusData.isText(nTrial, :)), ...
            stimulusData.height(nTrial, stimulusData.isText(nTrial, :)), ...
            stimulusData.hOffset(nTrial, stimulusData.isText(nTrial, :)), ...
            stimulusData.vOffset(nTrial, stimulusData.isText(nTrial, :)), ...
            xc, yc, ScreenCoords);

        % Draw images
        drawImages(wPtr, imageMap, ...
            stimulusData.fileName(nTrial, stimulusData.isImage(nTrial, :)), ...
            stimulusData.width(nTrial, stimulusData.isImage(nTrial, :)), ...
            stimulusData.height(nTrial, stimulusData.isImage(nTrial, :)), ...
            stimulusData.hOffset(nTrial, stimulusData.isImage(nTrial, :)), ...
            stimulusData.vOffset(nTrial, stimulusData.isImage(nTrial, :)), ...
            xc, yc);

        % Find movie stimuli.
        %   If none exist, then tell Psychtoolbox we are done drawing.
        movieStimuli = find([stimulusData.isVideo(nTrial, :)]);
        if isempty(movieStimuli)
            Screen('DrawingFinished', wPtr, 0);
            % Drawing might not be finished if there is feedback
        end

        % for infinite duration, wait and check input before next flip
        %   then reset NextFlip to the current time
        alreadyCheckedResponse = false;
        if nTrial > 1 && isinf(NextFlip)
            rawResponseData(nTrial-1) = getInput(metaData.inputType, ...
                inputHandle, ...
                inputData(nTrial-1).validButtons, ...
                Inf);
            alreadyCheckedResponse = true;
            NextFlip = GetSecs();
        end

        % Draw movie
        if ~isempty(movieStimuli)
            drawVideos(wPtr, movieMap, metaData, ...
                stimulusData.fileName(nTrial, movieStimuli), stimulusData.duration(nTrial, movieStimuli), NextFlip, NextFlip + (stimulusData.duration(nTrial) / 1000), stimulusData.width(nTrial, movieStimuli), stimulusData.height(nTrial, movieStimuli), stimulusData.hOffset(nTrial, movieStimuli), stimulusData.vOffset(nTrial, movieStimuli), xc, yc);
        else
            % Flip stimulus if there are no videos.
            %   drawVideos() will automatically flip stimuli to screen.
            flipData(nTrial) = screenFlip(wPtr, NextFlip, int2str(nTrial), 0);
        end

        % for finite duration, check the response afterwards
        if nTrial > 1 && ~alreadyCheckedResponse
            rawResponseData(nTrial-1) = getInput(metaData.inputType, ...
                inputHandle, ...
                inputData(nTrial-1).validButtons, ...
                GetSecs());
        end

        if nTrial > 1
            [scoredResponse, eventStart, eventBaseline] = scoreInput(flipData, ...
                inputData, rawResponseData, responseData, nTrial - 1, eventStart, eventBaseline);
            if ~isempty(scoredResponse)
                responseData(inputData(nTrial-1).responseEvent) = scoredResponse;
            end
        end

        NextFlip = NextFlip + (stimulusData.duration(nTrial) / 1000);
        % The following is if a flip misses the expected time and timing
        %   can be reset.
        % NextFlip = flipData(nTrial).FlipStartTime + ...
        %            (stimulusData(nTrial, 1).duration / 1000);

    end
    
    % Get end time and save data
    ExpEndTime = GetSecs();
    % save([int2str(ExpEndTime) '_debug.mat']);

    cleanupInput(metaData.inputType, inputHandle);
    
end
